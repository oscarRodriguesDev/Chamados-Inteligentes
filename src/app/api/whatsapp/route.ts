import { NextRequest, NextResponse } from "next/server";
import { quadro_avisos } from "@/src/app/utils/avisos";
import { isValidCPF } from "@/src/app/utils/validar_cpf";

const OPENAI_API_KEY = process.env.OPENAI_API_KEY!;
const OPENAI_API_URL = "https://api.openai.com/v1/chat/completions";
var lista_cpf = ['123456','06230124645']

// Controle simples de sess√µes na mem√≥ria
interface SessionData {
  step: "inicio" | "cpf_pendente" | "ok";
  cpfTries: number;
}

const userSessions = new Map<string, SessionData>();

// Fun√ß√£o para gerar resposta do GPT
async function generateReply(userMessage: string): Promise<string> {
  const avisos = quadro_avisos;
  const now = new Date();
  const protocolo = `tk-${now.getDate().toString().padStart(2, "0")}${(now.getMonth() + 1)
    .toString()
    .padStart(2, "0")}${now.getFullYear()}${now
      .getHours()
      .toString()
      .padStart(2, "0")}${now
        .getMinutes()
        .toString()
        .padStart(2, "0")}${now
          .getSeconds()
          .toString()
          .padStart(2, "0")}${now.getMilliseconds().toString().padStart(3, "0")}`;

  // Prompt do sistema
  const systemPrompt = `
      Voc√™ √© um assistente virtual cordial chamada Hevelyn, respons√°vel por responder d√∫vidas de colaboradores sobre chamados internos.
      Sua principal fun√ß√£o √© tentar resolver o problema do usu√°rio usando as informa√ß√µes do seguinte quadro de avisos: ${avisos}.
      Evite abrir chamados desnecess√°rios ‚Äî sempre que poss√≠vel, forne√ßa diretamente a informa√ß√£o que o usu√°rio est√° buscando.
      
      ### Regras principais 
      - Sempre tente resolver a d√∫vida usando o quadro de avisos: ${avisos}.
      - S√≥ ofere√ßa abertura de chamado se realmente n√£o puder ajudar com as informa√ß√µes dispon√≠veis, ou  caso o colaborador pe√ßa explicitamente
      para *abrir um chamado* ou *termo equivalente* caso contrario NUNCA ofere√ßa essa op√ß√£o
      - Antes de fornecer o protocolo, confirme o motivo da abertura do chamado.
      - Ap√≥s receber o motivo, consulte ${avisos} novamente e veja se h√° solu√ß√£o. Se n√£o houver, pergunte:
        ‚ÄúVoc√™ deseja que eu abra um chamado para tratar disso?‚Äù
      - Se o usu√°rio confirmar (qualquer resposta positiva √© suficiente), envie o link **clic√°vel** do chamado:
        ${process.env.NEXT_PUBLIC_URL}/chamados/${protocolo}
      - O link deve sempre ser exibido em formato completo (http://...), pois o atendimento ocorre via whatsapp.
      - Caso o usu√°rio precise enviar documenta√ß√£o, comprovante ou qualquer anexo, tamb√©m oriente a abrir o chamado pelo mesmo link.
      - Seja cordial, direto, objetivo e humano.
      - Nunca explique o que o link faz ‚Äî apenas envie o link quando chegar o momento. semrpe diga ao usuario que o atendimento,
       pode demorar devido a alta demanda de chamados
      
      ### Casos especiais ‚Äî envio de documentos ou informa√ß√µes
      - Sempre que o usu√°rio mencionar a necessidade de **enviar qualquer tipo de documento, comprovante, formul√°rio, foto, arquivo ou informa√ß√£o para a empresa**, 
      voc√™ **deve instru√≠-lo a fazer isso exclusivamente por meio da abertura de um chamado**.
    - Nesses casos, **n√£o tente resolver internamente**: apenas confirme que o envio deve ser feito via chamado e apresente o **protocolo √∫nico**.
    - Exemplo: se o usu√°rio disser ‚Äúpreciso enviar um atestado‚Äù, ‚Äútenho que mandar um comprovante‚Äù, ‚Äúquero enviar uma foto‚Äù, ‚Äútenho um documento‚Äù, etc.,
      responda de forma cordial e objetiva, informando que o envio deve ser feito via chamado e inclua o protocolo.

      `
  try {
    const prompt = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userMessage },
    ];

    const res = await fetch(OPENAI_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: prompt,
        max_tokens: 512,
        temperature: 0.7,
      }),
    });

    const data = await res.json();
    return data.choices?.[0]?.message?.content?.trim() || "Desculpe, n√£o consegui entender.";
  } catch (err) {
    console.error("Erro ao gerar resposta do GPT:", err);
    return "Tivemos um erro ao processar sua mensagem. Tente novamente mais tarde.";
  }
}

// Fun√ß√£o simples para validar CPF (apenas n√∫meros e 11 d√≠gitos)


export async function POST(req: NextRequest) {
  try {
    const { message, sessionId } = await req.json();
    console.log("Mensagem recebida:", message, "de:", sessionId);

    const session = userSessions.get(sessionId) || { step: "inicio", cpfTries: 0 };

    // üîπ Passo 1: primeira intera√ß√£o ‚Üí apresenta√ß√£o
    if (session.step === "inicio") {
      session.step = "cpf_pendente";
      userSessions.set(sessionId, session);
      return NextResponse.json({
        response: `
üå∏ Oi! Eu sou a *Hevelyn*, sua assistente virtual NoLevel.
Posso te ajudar com informa√ß√µes ou abrir um chamado se for necess√°rio.

Para come√ßar, por favor, digite seu *CPF* (apenas n√∫meros).
Isso √© necess√°rio para sua identifica√ß√£o e para que eu possa te ajudar melhor.`
      });
    }

    // üîπ Passo 2: esperando CPF
    if (session.step === "cpf_pendente") {
      let cpfValido = false;
      try {
        cpfValido = isValidCPF(message, lista_cpf);
      } catch (err: any) {
        // Tratamento do erro lan√ßado pela fun√ß√£o de valida√ß√£o de CPF
        session.cpfTries += 1;
        if (session.cpfTries >= 3) {
          userSessions.delete(sessionId);
          return NextResponse.json({
            response: `‚ö†Ô∏è Voc√™ n√£o informou um CPF v√°lido ap√≥s 3 tentativas. O atendimento foi finalizado.`
          });
        } else {
          userSessions.set(sessionId, session);
          return NextResponse.json({
            response: `‚ö†Ô∏è ${err.message || "CPF inv√°lido."} Por favor, digite apenas os 11 n√∫meros do seu CPF. Tentativa ${session.cpfTries}/3.`
          });
        }
      }

      if (cpfValido) {
        session.step = "ok";
        userSessions.set(sessionId, session);
        return NextResponse.json({
          response: `‚úÖ Obrigado! CPF recebido com sucesso. Agora posso te ajudar com sua solicita√ß√£o.`
        });
      } else {
        session.cpfTries += 1;
        if (session.cpfTries >= 3) {
          userSessions.delete(sessionId);
          return NextResponse.json({
            response: `‚ö†Ô∏è Voc√™ n√£o informou um CPF v√°lido ap√≥s 3 tentativas. O atendimento foi finalizado.`
          });
        } else {
          userSessions.set(sessionId, session);
          return NextResponse.json({
            response: `‚ö†Ô∏è CPF inv√°lido. Por favor, digite apenas os 11 n√∫meros do seu CPF. Tentativa ${session.cpfTries}/3.`
          });
        }
      }
    }
       
    // üîπ Passo 3: CPF recebido ‚Üí usa GPT normalmente
    if (session.step === "ok") {
      const resposta = await generateReply(message);
      return NextResponse.json({ response: resposta });
    }

    // fallback
    return NextResponse.json({ response: "Erro inesperado. Tente novamente." });

  } catch (error) {
    console.error("Erro ao gerar resposta via GPT:", error);
    return NextResponse.json(
      { response: "Erro interno. Tente novamente mais tarde." },
      { status: 500 }
    );
  }
}
